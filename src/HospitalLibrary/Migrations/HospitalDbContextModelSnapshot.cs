// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.Property<int>("AllergensId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientsId")
                        .HasColumnType("integer");

                    b.HasKey("AllergensId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergenPatient");
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.Property<int>("ConsiliumsId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorsId")
                        .HasColumnType("integer");

                    b.HasKey("ConsiliumsId", "DoctorsId");

                    b.HasIndex("DoctorsId");

                    b.ToTable("ConsiliumDoctor");
                });

            modelBuilder.Entity("FloorRoom", b =>
                {
                    b.Property<int>("FloorsId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomsId")
                        .HasColumnType("integer");

                    b.HasKey("FloorsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("FloorRoom");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Novi Sad",
                            Country = "Srbija",
                            Number = "12",
                            Street = "Dunavska 29"
                        },
                        new
                        {
                            Id = 2,
                            City = "Beograd",
                            Country = "Srbija",
                            Number = "10",
                            Street = "Beogradska"
                        },
                        new
                        {
                            Id = 3,
                            City = "Sremska Mitrovica",
                            Country = "Srbija",
                            Number = "15",
                            Street = "Skolska"
                        },
                        new
                        {
                            Id = 4,
                            City = "Gradska",
                            Country = "Srbija",
                            Number = "25",
                            Street = "Njegoseva"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Penicilin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sulfonamidi "
                        },
                        new
                        {
                            Id = 3,
                            Name = "Salicilna kiselina"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            Available = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            Available = false,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 9,
                            Available = true,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 10,
                            Available = true,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 11,
                            Available = true,
                            RoomId = 9
                        },
                        new
                        {
                            Id = 12,
                            Available = true,
                            RoomId = 9
                        },
                        new
                        {
                            Id = 13,
                            Available = true,
                            RoomId = 9
                        },
                        new
                        {
                            Id = 14,
                            Available = true,
                            RoomId = 9
                        },
                        new
                        {
                            Id = 15,
                            Available = true,
                            RoomId = 16
                        },
                        new
                        {
                            Id = 16,
                            Available = true,
                            RoomId = 16
                        },
                        new
                        {
                            Id = 17,
                            Available = true,
                            RoomId = 16
                        },
                        new
                        {
                            Id = 18,
                            Available = true,
                            RoomId = 16
                        },
                        new
                        {
                            Id = 19,
                            Available = true,
                            RoomId = 17
                        },
                        new
                        {
                            Id = 20,
                            Available = true,
                            RoomId = 17
                        },
                        new
                        {
                            Id = 21,
                            Available = true,
                            RoomId = 17
                        },
                        new
                        {
                            Id = 22,
                            Available = true,
                            RoomId = 17
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Blood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Bloods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Quantity = 100,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Quantity = 100,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Quantity = 100,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Quantity = 100,
                            Type = 3
                        },
                        new
                        {
                            Id = 5,
                            Quantity = 100,
                            Type = 4
                        },
                        new
                        {
                            Id = 6,
                            Quantity = 100,
                            Type = 5
                        },
                        new
                        {
                            Id = 7,
                            Quantity = 100,
                            Type = 6
                        },
                        new
                        {
                            Id = 8,
                            Quantity = 100,
                            Type = 7
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BloodUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DatePrescribed")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BloodUnits");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BloodUnitRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountL")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("BloodUnitRequests");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Consilium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("Specialization")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Slobodan",
                            LastName = "Radulovic",
                            RoomId = 1,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Aleksa",
                            LastName = "Zindovic",
                            RoomId = 2,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Mica",
                            LastName = "Micic",
                            RoomId = 3,
                            Specialization = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Examinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            PatientId = 1,
                            RoomId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 3,
                            PatientId = 1,
                            RoomId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 1,
                            PatientId = 1,
                            RoomId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 1,
                            PatientId = 3,
                            RoomId = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ExaminationDone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExaminationId")
                        .HasColumnType("integer");

                    b.Property<string>("Record")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationId");

                    b.ToTable("ExaminationsDone");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = true,
                            IsPublic = true,
                            PatientId = 1,
                            Status = 0,
                            Text = "Bolnica je dobra"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = false,
                            IsPublic = true,
                            PatientId = 2,
                            Status = 0,
                            Text = "Bolnica je losa"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = false,
                            IsPublic = true,
                            PatientId = 3,
                            Status = 1,
                            Text = "Bolnica je odlicna"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateOnly(2022, 10, 24),
                            IsAnonymous = true,
                            IsPublic = true,
                            PatientId = 4,
                            Status = 0,
                            Text = "Bolnica je solidna"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MedicalDrugs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MedicalDrugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50,
                            Code = "Code1",
                            Name = "Drugs1"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 50,
                            Code = "Code2",
                            Name = "Drugs2"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 50,
                            Code = "Code3",
                            Name = "Drugs3"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SelectedDoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            BloodType = 0,
                            Email = "peraperic@gmail.com",
                            FirstName = "Pera",
                            Gender = 0,
                            LastName = "Peric",
                            SelectedDoctorId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            BloodType = 7,
                            Email = "markomarkovic@gmail.com",
                            FirstName = "Marko",
                            Gender = 0,
                            LastName = "Markovic",
                            SelectedDoctorId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            BloodType = 5,
                            Email = "dusanbaljinac@gmail.com",
                            FirstName = "Dusan",
                            Gender = 0,
                            LastName = "Baljinac",
                            SelectedDoctorId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            BloodType = 3,
                            Email = "slobodanradulovic@gmail.com",
                            FirstName = "Slobodan",
                            Gender = 0,
                            LastName = "Radulovic",
                            SelectedDoctorId = 2,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExaminationDoneId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationDoneId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PrescriptionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MedicalDrugId")
                        .HasColumnType("integer");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MedicalDrugId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionItem");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExaminationDoneId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationDoneId");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Temperatura"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Glavobolja"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bol u stomaku"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TherapySubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TherapyType")
                        .HasColumnType("integer");

                    b.Property<int>("TreatmentHistoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WhenPrescribed")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TreatmentHistoryId");

                    b.ToTable("Therapies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1,
                            DoctorId = 1,
                            Reason = "Headache",
                            TherapySubject = "Bromazepam 500mg",
                            TherapyType = 0,
                            TreatmentHistoryId = 1,
                            WhenPrescribed = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1468)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1,
                            DoctorId = 2,
                            Reason = "Blood loss",
                            TherapySubject = "A+ 500ml",
                            TherapyType = 1,
                            TreatmentHistoryId = 1,
                            WhenPrescribed = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1470)
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.TreatmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BedId")
                        .HasColumnType("integer");

                    b.Property<string>("DischargeReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("TreatmentHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = false,
                            BedId = 1,
                            DischargeReason = "abc",
                            EndDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1433),
                            PatientId = 1,
                            Reason = "reason1",
                            RoomId = 1,
                            StartDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1432)
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            BedId = 2,
                            DischargeReason = "abc",
                            EndDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1436),
                            PatientId = 2,
                            Reason = "reason2",
                            RoomId = 1,
                            StartDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1436)
                        },
                        new
                        {
                            Id = 3,
                            Active = false,
                            BedId = 4,
                            DischargeReason = "abc",
                            EndDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1437),
                            PatientId = 3,
                            Reason = "reason3",
                            RoomId = 2,
                            StartDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1437)
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            BedId = 1,
                            DischargeReason = "abc",
                            PatientId = 1,
                            Reason = "reason1",
                            RoomId = 1,
                            StartDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1438)
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            BedId = 2,
                            DischargeReason = "abc",
                            PatientId = 2,
                            Reason = "reason2",
                            RoomId = 1,
                            StartDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1438)
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            BedId = 4,
                            DischargeReason = "abc",
                            PatientId = 3,
                            Reason = "reason3",
                            RoomId = 2,
                            StartDate = new DateTime(2023, 1, 10, 22, 0, 56, 412, DateTimeKind.Utc).AddTicks(1439)
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "gray",
                            Height = 150,
                            Name = "One",
                            Width = 450,
                            X = 100,
                            Y = 100
                        },
                        new
                        {
                            Id = 2,
                            Color = "gray",
                            Height = 450,
                            Name = "Too",
                            Width = 150,
                            X = 600,
                            Y = 100
                        },
                        new
                        {
                            Id = 3,
                            Color = "gray",
                            Height = 130,
                            Name = "Tre",
                            Width = 400,
                            X = 400,
                            Y = 600
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EquipmentId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            EquipmentId = 1,
                            Amount = 2,
                            Name = "Krevet",
                            RoomId = 1
                        },
                        new
                        {
                            EquipmentId = 2,
                            Amount = 2,
                            Name = "Stetoskop",
                            RoomId = 1
                        },
                        new
                        {
                            EquipmentId = 3,
                            Amount = 4,
                            Name = "Stolica",
                            RoomId = 1
                        },
                        new
                        {
                            EquipmentId = 4,
                            Amount = 20,
                            Name = "Stolica",
                            RoomId = 2
                        },
                        new
                        {
                            EquipmentId = 5,
                            Amount = 2,
                            Name = "Aparat za kafu",
                            RoomId = 2
                        },
                        new
                        {
                            EquipmentId = 6,
                            Amount = 4,
                            Name = "Fotelja",
                            RoomId = 2
                        },
                        new
                        {
                            EquipmentId = 7,
                            Amount = 2,
                            Name = "Spric za ispiranje usiju",
                            RoomId = 3
                        },
                        new
                        {
                            EquipmentId = 8,
                            Amount = 3,
                            Name = "Otoskop",
                            RoomId = 3
                        },
                        new
                        {
                            EquipmentId = 9,
                            Amount = 2,
                            Name = "Stetoskop",
                            RoomId = 4
                        },
                        new
                        {
                            EquipmentId = 10,
                            Amount = 3,
                            Name = "Bolnicki krevet",
                            RoomId = 4
                        },
                        new
                        {
                            EquipmentId = 11,
                            Amount = 2,
                            Name = "Aparat za merenje pritiska",
                            RoomId = 4
                        },
                        new
                        {
                            EquipmentId = 12,
                            Amount = 4,
                            Name = "Stolica",
                            RoomId = 5
                        },
                        new
                        {
                            EquipmentId = 13,
                            Amount = 50,
                            Name = "Zavoji",
                            RoomId = 6
                        },
                        new
                        {
                            EquipmentId = 14,
                            Amount = 24,
                            Name = "Spricevi",
                            RoomId = 6
                        },
                        new
                        {
                            EquipmentId = 15,
                            Amount = 12,
                            Name = "Gips",
                            RoomId = 6
                        },
                        new
                        {
                            EquipmentId = 16,
                            Amount = 200,
                            Name = "Flasteri",
                            RoomId = 6
                        },
                        new
                        {
                            EquipmentId = 17,
                            Amount = 20,
                            Name = "Bolnicki krevet",
                            RoomId = 7
                        },
                        new
                        {
                            EquipmentId = 18,
                            Amount = 20,
                            Name = "Infuzija",
                            RoomId = 7
                        },
                        new
                        {
                            EquipmentId = 19,
                            Amount = 20,
                            Name = "Stolica",
                            RoomId = 8
                        },
                        new
                        {
                            EquipmentId = 20,
                            Amount = 2,
                            Name = "Stetoskop",
                            RoomId = 9
                        },
                        new
                        {
                            EquipmentId = 21,
                            Amount = 4,
                            Name = "Stolica",
                            RoomId = 10
                        },
                        new
                        {
                            EquipmentId = 22,
                            Amount = 2,
                            Name = "Krevet",
                            RoomId = 11
                        },
                        new
                        {
                            EquipmentId = 23,
                            Amount = 2,
                            Name = "Stetoskop",
                            RoomId = 12
                        },
                        new
                        {
                            EquipmentId = 24,
                            Amount = 4,
                            Name = "Infuzija",
                            RoomId = 13
                        },
                        new
                        {
                            EquipmentId = 25,
                            Amount = 1,
                            Name = "Fotelja",
                            RoomId = 13
                        },
                        new
                        {
                            EquipmentId = 26,
                            Amount = 20,
                            Name = "Stolica",
                            RoomId = 13
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            BuildingId = 1,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 3",
                            Width = 300,
                            X = 100,
                            Y = 70
                        },
                        new
                        {
                            Id = 2,
                            BuildingId = 1,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 2",
                            Width = 300,
                            X = 100,
                            Y = 170
                        },
                        new
                        {
                            Id = 1,
                            BuildingId = 1,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 1",
                            Width = 300,
                            X = 100,
                            Y = 270
                        },
                        new
                        {
                            Id = 5,
                            BuildingId = 2,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 2",
                            Width = 300,
                            X = 100,
                            Y = 170
                        },
                        new
                        {
                            Id = 4,
                            BuildingId = 2,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 1",
                            Width = 300,
                            X = 100,
                            Y = 270
                        },
                        new
                        {
                            Id = 8,
                            BuildingId = 3,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 3",
                            Width = 300,
                            X = 100,
                            Y = 70
                        },
                        new
                        {
                            Id = 7,
                            BuildingId = 3,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 2",
                            Width = 300,
                            X = 100,
                            Y = 170
                        },
                        new
                        {
                            Id = 6,
                            BuildingId = 3,
                            Color = "white",
                            Height = 100,
                            Number = "Floor 1",
                            Width = 300,
                            X = 100,
                            Y = 270
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHourSaturday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHourSunday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHourWorkDay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("StartHourSaturday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHourSunday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHourWorkDay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pregledi za decu",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "101,Pedijatrija",
                            RoomId = 1,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Opustanje za radnike i posetioce",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "102,Kafeterija",
                            RoomId = 2,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 3,
                            Description = "UHO,GRLO,NOS",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "103,Otorinolaringologija",
                            RoomId = 3,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Pregled misica i povreda",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "201,Fizioterapeut",
                            RoomId = 4,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Pregledi za decu",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "202,Stomatologija",
                            RoomId = 5,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Stanje robe u objektu",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "301,Magacin",
                            RoomId = 6,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Kreveti i sve potrebno za oporavku",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "302,Opsta nega",
                            RoomId = 7,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Stolice i fotelje za cekanje",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "303,Cekaonica",
                            RoomId = 8,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 9,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "101a,Kardiologija",
                            RoomId = 9,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 10,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "102a,Vaskularne bolesti",
                            RoomId = 10,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 11,
                            Description = "...,...,...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "103a,Hirurgija",
                            RoomId = 11,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 12,
                            Description = "... ... ... ...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "201a,Papirologija",
                            RoomId = 12,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 13,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "202a,Prijavna soba",
                            RoomId = 13,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 14,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "203a,Uplasta/isplata",
                            RoomId = 14,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 15,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "204a,Izgubljeno/nadjeno",
                            RoomId = 15,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 16,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "101b,Onkologija",
                            RoomId = 16,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 17,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "102b,Pedijatrija",
                            RoomId = 17,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 18,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "201b,Gastronomija",
                            RoomId = 18,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        },
                        new
                        {
                            Id = 19,
                            Description = "...",
                            EndHourSaturday = "17:00h",
                            EndHourSunday = "CLOSED",
                            EndHourWorkDay = "17:00h",
                            Name = "301b,Magacin",
                            RoomId = 19,
                            StartHourSaturday = "12:00h",
                            StartHourSunday = "CLOSED",
                            StartHourWorkDay = "10:00h"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Map.MapBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .IsUnique();

                    b.ToTable("MapBuildings");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Map.MapFloor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId")
                        .IsUnique();

                    b.ToTable("MapFloors");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Map.MapForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHourSaturday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHourSunday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHourWorkDay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHourSaturday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHourSunday")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHourWorkDay")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MapForms");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Map.MapRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MapRooms");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "blue",
                            FloorId = 1,
                            Height = 160,
                            Name = "Pedijatrija",
                            Type = 0,
                            Width = 260,
                            X = 0,
                            Y = 0
                        },
                        new
                        {
                            Id = 2,
                            Color = "blue",
                            FloorId = 1,
                            Height = 140,
                            Name = "Kafeterija",
                            Type = 0,
                            Width = 220,
                            X = 0,
                            Y = 338
                        },
                        new
                        {
                            Id = 3,
                            Color = "blue",
                            FloorId = 1,
                            Height = 180,
                            Name = "Otorinolaringologija",
                            Type = 0,
                            Width = 300,
                            X = 237,
                            Y = 0
                        },
                        new
                        {
                            Id = 4,
                            Color = "blue",
                            FloorId = 2,
                            Height = 100,
                            Name = "Fizioterapeut",
                            Type = 0,
                            Width = 200,
                            X = 270,
                            Y = 378
                        },
                        new
                        {
                            Id = 5,
                            Color = "blue",
                            FloorId = 2,
                            Height = 180,
                            Name = "Stomatologija",
                            Type = 0,
                            Width = 360,
                            X = 0,
                            Y = 0
                        },
                        new
                        {
                            Id = 6,
                            Color = "blue",
                            FloorId = 3,
                            Height = 180,
                            Name = "Magacin",
                            Type = 0,
                            Width = 260,
                            X = 0,
                            Y = 0
                        },
                        new
                        {
                            Id = 7,
                            Color = "blue",
                            FloorId = 3,
                            Height = 140,
                            Name = "Opsta nega",
                            Type = 0,
                            Width = 220,
                            X = 0,
                            Y = 338
                        },
                        new
                        {
                            Id = 8,
                            Color = "blue",
                            FloorId = 3,
                            Height = 140,
                            Name = "Cekaonica",
                            Type = 0,
                            Width = 220,
                            X = 330,
                            Y = 158
                        },
                        new
                        {
                            Id = 9,
                            Color = "blue",
                            FloorId = 4,
                            Height = 170,
                            Name = "Kardiologija",
                            Type = 0,
                            Width = 320,
                            X = 0,
                            Y = 0
                        },
                        new
                        {
                            Id = 10,
                            Color = "blue",
                            FloorId = 4,
                            Height = 140,
                            Name = "Vaskularne bolesti",
                            Type = 0,
                            Width = 220,
                            X = 0,
                            Y = 365
                        },
                        new
                        {
                            Id = 11,
                            Color = "blue",
                            FloorId = 4,
                            Height = 140,
                            Name = "Hirurgija",
                            Type = 0,
                            Width = 220,
                            X = 245,
                            Y = 0
                        },
                        new
                        {
                            Id = 12,
                            Color = "blue",
                            FloorId = 5,
                            Height = 140,
                            Name = "Papirologija",
                            Type = 0,
                            Width = 220,
                            X = 0,
                            Y = 0
                        },
                        new
                        {
                            Id = 13,
                            Color = "blue",
                            FloorId = 5,
                            Height = 140,
                            Name = "Prijavna soba",
                            Type = 0,
                            Width = 220,
                            X = 200,
                            Y = 0
                        },
                        new
                        {
                            Id = 14,
                            Color = "blue",
                            FloorId = 5,
                            Height = 140,
                            Name = "Uplasta/isplata",
                            Type = 0,
                            Width = 220,
                            X = 0,
                            Y = 350
                        },
                        new
                        {
                            Id = 15,
                            Color = "blue",
                            FloorId = 5,
                            Height = 140,
                            Name = "Izgubljeno/nadjeno",
                            Type = 0,
                            Width = 220,
                            X = 200,
                            Y = 350
                        },
                        new
                        {
                            Id = 16,
                            Color = "blue",
                            FloorId = 6,
                            Height = 190,
                            Name = "Onkologija",
                            Type = 0,
                            Width = 320,
                            X = 0,
                            Y = 0
                        },
                        new
                        {
                            Id = 17,
                            Color = "blue",
                            FloorId = 6,
                            Height = 240,
                            Name = "Onkologija",
                            Type = 0,
                            Width = 250,
                            X = 200,
                            Y = 300
                        },
                        new
                        {
                            Id = 18,
                            Color = "blue",
                            FloorId = 7,
                            Height = 280,
                            Name = "Gastronomija",
                            Type = 0,
                            Width = 420,
                            X = 50,
                            Y = 100
                        },
                        new
                        {
                            Id = 19,
                            Color = "blue",
                            FloorId = 8,
                            Height = 170,
                            Name = "Magacin",
                            Type = 0,
                            Width = 320,
                            X = 100,
                            Y = 138
                        });
                });

            modelBuilder.Entity("AllergenPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsiliumDoctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Consilium", null)
                        .WithMany()
                        .HasForeignKey("ConsiliumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FloorRoom", b =>
                {
                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Floor", null)
                        .WithMany()
                        .HasForeignKey("FloorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Bed", b =>
                {
                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Room", null)
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BloodUnitRequest", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Consilium", b =>
                {
                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.DateRange", "Interval", b1 =>
                        {
                            b1.Property<int>("ConsiliumId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ConsiliumId");

                            b1.ToTable("Consiliums");

                            b1.WithOwner()
                                .HasForeignKey("ConsiliumId");
                        });

                    b.Navigation("Interval")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.DateRange", "WorkHour", b1 =>
                        {
                            b1.Property<int>("DoctorId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");

                            b1.HasData(
                                new
                                {
                                    DoctorId = 1,
                                    End = new DateTime(2022, 12, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    DoctorId = 2,
                                    End = new DateTime(2022, 12, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    DoctorId = 3,
                                    End = new DateTime(2022, 12, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Room");

                    b.Navigation("WorkHour")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Examination", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<int>("ExaminationId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ExaminationId");

                            b1.ToTable("Examinations");

                            b1.WithOwner()
                                .HasForeignKey("ExaminationId");

                            b1.HasData(
                                new
                                {
                                    ExaminationId = 1,
                                    End = new DateTime(2022, 12, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 7, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 2,
                                    End = new DateTime(2022, 12, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 3,
                                    End = new DateTime(2022, 12, 15, 12, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 4,
                                    End = new DateTime(2023, 1, 22, 8, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 1, 22, 8, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 5,
                                    End = new DateTime(2023, 2, 5, 9, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 2, 5, 9, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 6,
                                    End = new DateTime(2022, 12, 27, 7, 30, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 27, 7, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ExaminationId = 7,
                                    End = new DateTime(2022, 12, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2022, 12, 1, 8, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("DateRange")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ExaminationDone", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Examination", "Examination")
                        .WithMany()
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.FeedbackRating", "Rating", b1 =>
                        {
                            b1.Property<int>("FeedbackId")
                                .HasColumnType("integer");

                            b1.Property<int>("Rating")
                                .HasColumnType("integer");

                            b1.HasKey("FeedbackId");

                            b1.ToTable("Feedbacks");

                            b1.WithOwner()
                                .HasForeignKey("FeedbackId");

                            b1.HasData(
                                new
                                {
                                    FeedbackId = 1,
                                    Rating = 3
                                },
                                new
                                {
                                    FeedbackId = 2,
                                    Rating = 4
                                },
                                new
                                {
                                    FeedbackId = 3,
                                    Rating = 5
                                },
                                new
                                {
                                    FeedbackId = 4,
                                    Rating = 5
                                });
                        });

                    b.Navigation("Patient");

                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.Core.Model.ValueObjects.Pin", "Pin", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.HasData(
                                new
                                {
                                    PatientId = 1,
                                    Value = "2201000120492"
                                },
                                new
                                {
                                    PatientId = 2,
                                    Value = "1412995012451"
                                },
                                new
                                {
                                    PatientId = 3,
                                    Value = "2008004124293"
                                },
                                new
                                {
                                    PatientId = 4,
                                    Value = "1111978020204"
                                });
                        });

                    b.Navigation("Address");

                    b.Navigation("Pin")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Prescription", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.ExaminationDone", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("ExaminationDoneId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PrescriptionItem", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.MedicalDrugs", "MedicalDrug")
                        .WithMany()
                        .HasForeignKey("MedicalDrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Prescription", null)
                        .WithMany("PrescriptionItem")
                        .HasForeignKey("PrescriptionId");

                    b.Navigation("MedicalDrug");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Symptom", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.ExaminationDone", null)
                        .WithMany("Symptoms")
                        .HasForeignKey("ExaminationDoneId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Therapy", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.TreatmentHistory", "TreatmentHistory")
                        .WithMany("Therapies")
                        .HasForeignKey("TreatmentHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("TreatmentHistory");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.TreatmentHistory", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Map.MapBuilding", b =>
                {
                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Building", "Building")
                        .WithOne("Map")
                        .HasForeignKey("HospitalLibrary.GraphicalEditor.Model.Map.MapBuilding", "BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Map.MapFloor", b =>
                {
                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.Floor", "Floor")
                        .WithOne("Map")
                        .HasForeignKey("HospitalLibrary.GraphicalEditor.Model.Map.MapFloor", "FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ExaminationDone", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Prescription", b =>
                {
                    b.Navigation("PrescriptionItem");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.TreatmentHistory", b =>
                {
                    b.Navigation("Therapies");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Building", b =>
                {
                    b.Navigation("Floors");

                    b.Navigation("Map")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Floor", b =>
                {
                    b.Navigation("Map")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.Room", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
